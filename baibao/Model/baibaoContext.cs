#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.239
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace baibao.Model
{
    using System.Data.Linq;
    using System.Data.Linq.Mapping;
    using System.Reflection;
    using System.Linq;
    using System.ComponentModel;
    using System;
    using System.IO;
    using System.IO.IsolatedStorage;


    public class DebugWriter : TextWriter
    {
        private const int DefaultBufferSize = 256;
        private System.Text.StringBuilder _buffer;

        public DebugWriter()
        {
            BufferSize = 256;
            _buffer = new System.Text.StringBuilder(BufferSize);
        }

        public int BufferSize
        {
            get;
            private set;
        }

        public override System.Text.Encoding Encoding
        {
            get { return System.Text.Encoding.UTF8; }
        }

        #region StreamWriter Overrides
        public override void Write(char value)
        {
            _buffer.Append(value);
            if (_buffer.Length >= BufferSize)
                Flush();
        }

        public override void WriteLine(string value)
        {
            Flush();

            using (var reader = new StringReader(value))
            {
                string line;
                while (null != (line = reader.ReadLine()))
                    System.Diagnostics.Debug.WriteLine(line);
            }
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
                Flush();
        }

        public override void Flush()
        {
            if (_buffer.Length > 0)
            {
                System.Diagnostics.Debug.WriteLine(_buffer);
                _buffer.Clear();
            }
        }
        #endregion
    }


    public partial class baibaoContext : System.Data.Linq.DataContext
    {

        public bool CreateIfNotExists()
        {
            bool created = false;
            if (!this.DatabaseExists())
            {
                string[] names = this.GetType().Assembly.GetManifestResourceNames();
                string name = names.Where(n => n.EndsWith(FileName)).FirstOrDefault();
                if (name != null)
                {
                    using (Stream resourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(name))
                    {
                        if (resourceStream != null)
                        {
                            using (IsolatedStorageFile myIsolatedStorage = IsolatedStorageFile.GetUserStoreForApplication())
                            {
                                using (IsolatedStorageFileStream fileStream = new IsolatedStorageFileStream(FileName, FileMode.Create, myIsolatedStorage))
                                {
                                    using (BinaryWriter writer = new BinaryWriter(fileStream))
                                    {
                                        long length = resourceStream.Length;
                                        byte[] buffer = new byte[32];
                                        int readCount = 0;
                                        using (BinaryReader reader = new BinaryReader(resourceStream))
                                        {
                                            // read file in chunks in order to reduce memory consumption and increase performance
                                            while (readCount < length)
                                            {
                                                int actual = reader.Read(buffer, 0, buffer.Length);
                                                readCount += actual;
                                                writer.Write(buffer, 0, actual);
                                            }
                                        }
                                    }
                                }
                            }
                            created = true;
                        }
                        else
                        {
                            this.CreateDatabase();
                            created = true;
                        }
                    }
                }
                else
                {
                    this.CreateDatabase();
                    created = true;
                }
            }
            return created;
        }

        public bool LogDebug
        {
            set
            {
                if (value)
                {
                    this.Log = new DebugWriter();
                }
            }
        }

        public static string ConnectionString = "Data Source=isostore:/baibao.sdf";

        public static string ConnectionStringReadOnly = "Data Source=appdata:/baibao.sdf;File Mode=Read Only;";

        public static string FileName = "baibao.sdf";

        public baibaoContext(string connectionString)
            : base(connectionString)
        {
            OnCreated();
        }

        #region 可扩展性方法定义
        partial void OnCreated();
        partial void InsertMenulist(Menulist instance);
        partial void UpdateMenulist(Menulist instance);
        partial void DeleteMenulist(Menulist instance);
        
        #endregion

        public Table<Menulist> Menulists
        {

            get
            {
                return this.GetTable<Menulist>();
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "menulist")]
    public partial class Menulist : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Id;

        private string _Name;

        private string _Desc;

        private string _Icons;

        private string _Uri;

        private System.Nullable<int> _Sortid;

        #region 可扩展性方法定义
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnDescChanging(string value);
        partial void OnDescChanged();
        partial void OnIconsChanging(string value);
        partial void OnIconsChanged();
        partial void OnUriChanging(string value);
        partial void OnUriChanged();
        partial void OnSortidChanging(System.Nullable<int> value);
        partial void OnSortidChanged();
        #endregion

        public Menulist()
        {
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Name = "id", Storage = "_Id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Name = "name", Storage = "_Name", DbType = "NVarChar(100)")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Name = "desc", Storage = "_Desc", DbType = "NVarChar(100)")]
        public string Desc
        {
            get
            {
                return this._Desc;
            }
            set
            {
                if ((this._Desc != value))
                {
                    this.OnDescChanging(value);
                    this.SendPropertyChanging();
                    this._Desc = value;
                    this.SendPropertyChanged("Desc");
                    this.OnDescChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Name = "icons", Storage = "_Icons", DbType = "NVarChar(100)")]
        public string Icons
        {
            get
            {
                return this._Icons;
            }
            set
            {
                if ((this._Icons != value))
                {
                    this.OnIconsChanging(value);
                    this.SendPropertyChanging();
                    this._Icons = value;
                    this.SendPropertyChanged("Icons");
                    this.OnIconsChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Name = "uri", Storage = "_Uri", DbType = "NVarChar(100)")]
        public string Uri
        {
            get
            {
                return this._Uri;
            }
            set
            {
                if ((this._Uri != value))
                {
                    this.OnUriChanging(value);
                    this.SendPropertyChanging();
                    this._Uri = value;
                    this.SendPropertyChanged("Uri");
                    this.OnUriChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Name = "sortid", Storage = "_Sortid", DbType = "Int")]
        public System.Nullable<int> Sortid
        {
            get
            {
                return this._Sortid;
            }
            set
            {
                if ((this._Sortid != value))
                {
                    this.OnSortidChanging(value);
                    this.SendPropertyChanging();
                    this._Sortid = value;
                    this.SendPropertyChanged("Sortid");
                    this.OnSortidChanged();
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
}
#pragma warning restore 1591
